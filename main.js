/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianConfluenceSync
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}

// node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// main.ts
var DEFAULT_SETTINGS = {
  confluenceHost: "https://confluence.com",
  personalAccessToken: "",
  mapping: {}
};
var ObsidianConfluenceSync = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.regex = /---\s*uniqueId:\s*[^\n\r]*\s*---/g;
    this.createOrGetUniqueId = async (activeFile) => {
      var _a;
      let uniqueId = "";
      const frontmatter = (_a = this.app.metadataCache.getFileCache(activeFile)) == null ? void 0 : _a.frontmatter;
      if (frontmatter && frontmatter.uniqueId) {
        uniqueId = frontmatter.uniqueId;
      } else {
        uniqueId = this.generateUniqueID();
        const that = this;
        await this.app.fileManager.processFrontMatter(activeFile, (frontMatter) => {
          frontMatter["uniqueId"] = uniqueId;
          that.settings.mapping[uniqueId] = "";
          that.saveSettings();
        });
      }
      return uniqueId;
    };
    this.syncContentsToConfluence = async (confluencePageId, activeFileData, title) => {
      const pageContent = await this.getContentFromConfluence(confluencePageId);
      let response = await (0, import_obsidian.requestUrl)({
        url: this.settings.confluenceHost + "/rest/api/content/" + confluencePageId,
        method: "PUT",
        headers: {
          "Content-Type": "application/json;charset=utf-8",
          "Authorization": "Bearer " + this.settings.personalAccessToken
        },
        body: JSON.stringify(
          {
            "version": {
              "number": pageContent["version"]["number"] + 1
            },
            "type": pageContent["type"],
            "title": title,
            "body": {
              "storage": {
                "value": `<p class="auto-cursor-target"><br /></p><table class="wysiwyg-macro" style="background-image: url('https://confluence.phonepe.com/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e21hcmtkb3dufQ&amp;locale=en_GB&amp;version=2'); background-repeat: no-repeat;" data-macro-name="markdown" data-macro-schema-version="1" data-macro-body-type="PLAIN_TEXT" data-mce-resize="false"><tbody><tr><td class="wysiwyg-macro-body"><pre>` + activeFileData + '</pre></td></tr></tbody></table><p class="auto-cursor-target"><br /></p>',
                "representation": "editor"
              }
            }
          }
        )
      });
      if (response.status == 200) {
        return true;
      }
      return false;
    };
    this.getContentFromConfluence = async (confluencePageId) => {
      let response = await (0, import_obsidian.requestUrl)({
        url: this.settings.confluenceHost + "/rest/api/content/" + confluencePageId,
        method: "GET",
        headers: {
          "Authorization": "Bearer " + this.settings.personalAccessToken
        }
      });
      if (response.status == 200) {
        return response.json;
      }
    };
  }
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "sync-to-confluence",
      name: "Sync contents of current page to confluence",
      editorCallback: async (editor, view) => {
        const activeFile = this.app.workspace.getActiveFile();
        if (!activeFile) {
          return;
        }
        const uniqueId = await this.createOrGetUniqueId(activeFile);
        const confluenceLink = this.settings.mapping[uniqueId];
        if (confluenceLink && confluenceLink.length > 0) {
          new import_obsidian.Notice("Syncing to confluence!");
          let activeFileData = await this.app.vault.read(activeFile);
          activeFileData = activeFileData.replace(this.regex, "");
          this.syncContentsToConfluence(confluenceLink, activeFileData, activeFile.basename);
        } else {
          new import_obsidian.Notice("No confluence connection found for this page! Create a connection first.");
        }
      }
    });
    this.addCommand({
      id: "create-confluence-connection",
      name: "Create new confluence connection",
      callback: async () => {
        new CreateNewConnectionModal(this.app, async (result) => {
          const activeFile = this.app.workspace.getActiveFile();
          if (!activeFile) {
            return;
          }
          const uniqueId = await this.createOrGetUniqueId(activeFile);
          this.settings.mapping[uniqueId] = result;
          this.saveSettings();
        }).open();
      }
    });
    this.addSettingTab(new ObsidianConfluenceSyncSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  generateUniqueID() {
    return v4_default();
  }
};
var CreateNewConnectionModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Create new confluence connection" });
    new import_obsidian.Setting(contentEl).setName("Confluence page link").addText((text) => text.onChange((value) => {
      this.result = value;
    }));
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Submit").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.result);
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var ObsidianConfluenceSyncSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Confluence Host").setDesc("Host URL for Confluence").addText((text) => text.setPlaceholder("Confluence Host").setValue(this.plugin.settings.confluenceHost).onChange(async (value) => {
      this.plugin.settings.confluenceHost = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Personal Access Token").setDesc("Personal Access Token for Confluence").addText((text) => text.setPlaceholder("Personal Access Token").setValue(this.plugin.settings.personalAccessToken).onChange(async (value) => {
      this.plugin.settings.personalAccessToken = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
